{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 HelveticaNeue-Light;\f5\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18880\viewh21600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Anteckningar_Lab2\

\f1\b0 \
\
\
	\'95	Merge sort \'e4r stabil av den anledning att den alltid f\'f6rst v\'e4ljer att ta ifr\'e5n den v\'e4nstra halvan om vi har element som \'e4r lika stora.  \
\

\f0\b Insertion Sort
\f2\b0 \
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}Insertion Sort \'e4r b\'e5de in-place och stabil. In-place av den anledning att den sorterar i samma array. Stabil av den anledning att den inte g\'f6r n\'e5gon swap p\'e5 element som har lika nycklar.\
{\listtext	\uc0\u8226 	}Worst Case Performance \'e4r O(N^2), \'e4ven Average Case Complexity \'e4r O(N^2).\
{\listtext	\uc0\u8226 	}Data med f\'e5 inversions (n\'e4stan sorterad array), kommer sorteras n\'e4ra tiden O(N).\
{\listtext	\uc0\u8226 	}Sorterar snabbt p\'e5 sm\'e5 datasets (N < ~ 10 elements). Den \'e4r s\'e5ledes ett bra val f\'f6r sortering av mindre arrayer och data med f\'e5 inversions.\
{\listtext	\uc0\u8226 	}Den sorterar i konstant tid, O(1), och anv\'e4nder s\'e5ledes inget extra minne.\
{\listtext	\uc0\u8226 	}Exekveringstiden v\'e4xer kvadratisk i f\'f6rh\'e5llande till storleken p\'e5 problemet.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b Merge Sort
\f2\b0 \
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}\
{\listtext	\uc0\u8226 	}\
{\listtext	\uc0\u8226 	}When we merge subarrays we will in practice merge the subarrays placing the elements in a new array of the same length as the array that is sorted. Hence, merge sort is not in-place but uses O(N) extra (auxiliary) memory. This sorting algorithm is stable.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	Merge sort guarantees to sort an array of N items in time proportional to N log N, no matter what the input. Its prime disadvantage however that is uses extra space proportional to N.\
\

\f3\fs30 Abstract in-place merge.
\f4  The method 
\f5\fs26 merge(a, lo, mid, hi)
\f4\fs30  in {\field{\*\fldinst{HYPERLINK "https://algs4.cs.princeton.edu/22mergesort/Merge.java.html"}}{\fldrslt Merge.java}} puts the results of merging the subarrays 
\f5\fs26 a[lo..mid]
\f4\fs30  with 
\f5\fs26 a[mid+1..hi]
\f4\fs30  into a single ordered array, leaving the result in 
\f5\fs26 a[lo..hi]
\f4\fs30 . While it would be desirable to implement this method without using a significant amount of extra space, such solutions are remarkably complicated. Instead, 
\f5\fs26 merge()
\f4\fs30  copies everything to an auxiliary array and then merges back to the original.
\f2\fs28 \
\
\
\
It is not effective to continue subdividing the array into very small subarrays, instead we should change sorting strategy for short (less than ~ 10 elements) subarrays and sort them with insertion sort. Insertion sort will be faster for shorter arrays and since it is stable, it will preserve the stability of merge sort.
\f1 \
\
\
assignment 4\
for loop g
\f5\fs24 \'e5r genom hela arrayen O(N). If-satserna \'e4r konstant d\'e5 den inte g\'e5r igenom hela arrayen f\'f6r att j\'e4mf\'f6ra, utan den j\'e4mf\'f6r bara med ett v\'e4rde.\

\f1\fs28 \
\
}